
prj_mem_emu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c48  08002c48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c48  08002c48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c48  08002c48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08002c5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002c5c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009233  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f8  00000000  00000000  00029267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f648  00000000  00000000  0002b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d55  00000000  00000000  0003ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cef5  00000000  00000000  000449d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a18ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a84  00000000  00000000  000a191c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bf8 	.word	0x08002bf8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002bf8 	.word	0x08002bf8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b0c3      	sub	sp, #268	; 0x10c
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t mem[MEM_SIZE];
	uint8_t rxdata[3];
	uint32_t index = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	1d7a      	adds	r2, r7, #5
 800022a:	32ff      	adds	r2, #255	; 0xff
 800022c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fa45 	bl	80006bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f847 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f911 	bl	800045c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800023a:	f000 f8df 	bl	80003fc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800023e:	f000 f8a3 	bl	8000388 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_SPI_Receive(&hspi1, rxdata, 2, HAL_MAX_DELAY);
 8000242:	2301      	movs	r3, #1
 8000244:	425b      	negs	r3, r3
 8000246:	0039      	movs	r1, r7
 8000248:	481b      	ldr	r0, [pc, #108]	; (80002b8 <main+0x98>)
 800024a:	2202      	movs	r2, #2
 800024c:	f001 fbfa 	bl	8001a44 <HAL_SPI_Receive>
	  if(rxdata[0] == 0x02){
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <main+0x9c>)
 8000252:	2484      	movs	r4, #132	; 0x84
 8000254:	0064      	lsls	r4, r4, #1
 8000256:	191b      	adds	r3, r3, r4
 8000258:	19db      	adds	r3, r3, r7
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b02      	cmp	r3, #2
 800025e:	d115      	bne.n	800028c <main+0x6c>
		  HAL_SPI_Receive(&hspi1, rxdata + 2, 1, HAL_MAX_DELAY);
 8000260:	0039      	movs	r1, r7
 8000262:	3102      	adds	r1, #2
 8000264:	2301      	movs	r3, #1
 8000266:	425b      	negs	r3, r3
 8000268:	4813      	ldr	r0, [pc, #76]	; (80002b8 <main+0x98>)
 800026a:	2201      	movs	r2, #1
 800026c:	f001 fbea 	bl	8001a44 <HAL_SPI_Receive>
		  mem[rxdata[1] % MEM_SIZE] = rxdata[2];
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <main+0x9c>)
 8000272:	191b      	adds	r3, r3, r4
 8000274:	19db      	adds	r3, r3, r7
 8000276:	785b      	ldrb	r3, [r3, #1]
 8000278:	001a      	movs	r2, r3
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <main+0x9c>)
 800027c:	191b      	adds	r3, r3, r4
 800027e:	19db      	adds	r3, r3, r7
 8000280:	7899      	ldrb	r1, [r3, #2]
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <main+0xa0>)
 8000284:	191b      	adds	r3, r3, r4
 8000286:	19db      	adds	r3, r3, r7
 8000288:	5499      	strb	r1, [r3, r2]
 800028a:	e7da      	b.n	8000242 <main+0x22>
	  }else if(rxdata[0] == 0x03){
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <main+0x9c>)
 800028e:	2284      	movs	r2, #132	; 0x84
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	189b      	adds	r3, r3, r2
 8000294:	19db      	adds	r3, r3, r7
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b03      	cmp	r3, #3
 800029a:	d1d2      	bne.n	8000242 <main+0x22>
		  HAL_SPI_Transmit(&hspi1, &(mem[rxdata[1] % MEM_SIZE]), 1, HAL_MAX_DELAY);
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <main+0x9c>)
 800029e:	189b      	adds	r3, r3, r2
 80002a0:	19db      	adds	r3, r3, r7
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	001a      	movs	r2, r3
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	1899      	adds	r1, r3, r2
 80002aa:	2301      	movs	r3, #1
 80002ac:	425b      	negs	r3, r3
 80002ae:	4802      	ldr	r0, [pc, #8]	; (80002b8 <main+0x98>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	f001 fa67 	bl	8001784 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, rxdata, 2, HAL_MAX_DELAY);
 80002b6:	e7c4      	b.n	8000242 <main+0x22>
 80002b8:	20000028 	.word	0x20000028
 80002bc:	fffffef8 	.word	0xfffffef8
 80002c0:	fffffefc 	.word	0xfffffefc

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b095      	sub	sp, #84	; 0x54
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	2420      	movs	r4, #32
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	2330      	movs	r3, #48	; 0x30
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f002 fc87 	bl	8002be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	2310      	movs	r3, #16
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	0018      	movs	r0, r3
 80002e0:	2310      	movs	r3, #16
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f002 fc7f 	bl	8002be8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ea:	003b      	movs	r3, r7
 80002ec:	0018      	movs	r0, r3
 80002ee:	2310      	movs	r3, #16
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f002 fc78 	bl	8002be8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f8:	0021      	movs	r1, r4
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2202      	movs	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2201      	movs	r2, #1
 8000304:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2210      	movs	r2, #16
 800030a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2202      	movs	r2, #2
 8000310:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	22c0      	movs	r2, #192	; 0xc0
 800031c:	0352      	lsls	r2, r2, #13
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	187b      	adds	r3, r7, r1
 8000328:	0018      	movs	r0, r3
 800032a:	f000 fc47 	bl	8000bbc <HAL_RCC_OscConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000332:	f000 f8b9 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	2110      	movs	r1, #16
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2207      	movs	r2, #7
 800033c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2202      	movs	r2, #2
 8000342:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2101      	movs	r1, #1
 8000354:	0018      	movs	r0, r3
 8000356:	f000 ff4b 	bl	80011f0 <HAL_RCC_ClockConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800035e:	f000 f8a3 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000362:	003b      	movs	r3, r7
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000368:	003b      	movs	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036e:	003b      	movs	r3, r7
 8000370:	0018      	movs	r0, r3
 8000372:	f001 f881 	bl	8001478 <HAL_RCCEx_PeriphCLKConfig>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800037a:	f000 f895 	bl	80004a8 <Error_Handler>
  }
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b015      	add	sp, #84	; 0x54
 8000384:	bd90      	pop	{r4, r7, pc}
	...

08000388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_SPI1_Init+0x6c>)
 800038e:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <MX_SPI1_Init+0x70>)
 8000390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_SPI1_Init+0x6c>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_SPI1_Init+0x6c>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003a0:	22e0      	movs	r2, #224	; 0xe0
 80003a2:	00d2      	lsls	r2, r2, #3
 80003a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	0092      	lsls	r2, r2, #2
 80003b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003ce:	2207      	movs	r2, #7
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_SPI1_Init+0x6c>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 f917 	bl	8001614 <HAL_SPI_Init>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80003ea:	f000 f85d 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40013000 	.word	0x40013000

080003fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_USART1_UART_Init+0x58>)
 8000402:	4a15      	ldr	r2, [pc, #84]	; (8000458 <MX_USART1_UART_Init+0x5c>)
 8000404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000406:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MX_USART1_UART_Init+0x58>)
 8000408:	2296      	movs	r2, #150	; 0x96
 800040a:	0212      	lsls	r2, r2, #8
 800040c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_USART1_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_USART1_UART_Init+0x58>)
 8000422:	220c      	movs	r2, #12
 8000424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_USART1_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_USART1_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <MX_USART1_UART_Init+0x58>)
 8000440:	0018      	movs	r0, r3
 8000442:	f002 f807 	bl	8002454 <HAL_UART_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800044a:	f000 f82d 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	2000008c 	.word	0x2000008c
 8000458:	40013800 	.word	0x40013800

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MX_GPIO_Init+0x48>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_GPIO_Init+0x48>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	03c9      	lsls	r1, r1, #15
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_GPIO_Init+0x48>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	03db      	lsls	r3, r3, #15
 8000478:	4013      	ands	r3, r2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_GPIO_Init+0x48>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_GPIO_Init+0x48>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0289      	lsls	r1, r1, #10
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <MX_GPIO_Init+0x48>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	029b      	lsls	r3, r3, #10
 8000494:	4013      	ands	r3, r2
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x44>)
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <HAL_MspInit+0x44>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	2201      	movs	r2, #1
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_MspInit+0x44>)
 80004d4:	69da      	ldr	r2, [r3, #28]
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_MspInit+0x44>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	0549      	lsls	r1, r1, #21
 80004dc:	430a      	orrs	r2, r1
 80004de:	61da      	str	r2, [r3, #28]
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_MspInit+0x44>)
 80004e2:	69da      	ldr	r2, [r3, #28]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	055b      	lsls	r3, r3, #21
 80004e8:	4013      	ands	r3, r2
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b08b      	sub	sp, #44	; 0x2c
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	2414      	movs	r4, #20
 8000506:	193b      	adds	r3, r7, r4
 8000508:	0018      	movs	r0, r3
 800050a:	2314      	movs	r3, #20
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f002 fb6a 	bl	8002be8 <memset>
  if(hspi->Instance==SPI1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a1c      	ldr	r2, [pc, #112]	; (800058c <HAL_SPI_MspInit+0x90>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d132      	bne.n	8000584 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <HAL_SPI_MspInit+0x94>)
 8000520:	699a      	ldr	r2, [r3, #24]
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <HAL_SPI_MspInit+0x94>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0149      	lsls	r1, r1, #5
 8000528:	430a      	orrs	r2, r1
 800052a:	619a      	str	r2, [r3, #24]
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <HAL_SPI_MspInit+0x94>)
 800052e:	699a      	ldr	r2, [r3, #24]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	015b      	lsls	r3, r3, #5
 8000534:	4013      	ands	r3, r2
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <HAL_SPI_MspInit+0x94>)
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <HAL_SPI_MspInit+0x94>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0289      	lsls	r1, r1, #10
 8000544:	430a      	orrs	r2, r1
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <HAL_SPI_MspInit+0x94>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	029b      	lsls	r3, r3, #10
 8000550:	4013      	ands	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000556:	0021      	movs	r1, r4
 8000558:	187b      	adds	r3, r7, r1
 800055a:	22e0      	movs	r2, #224	; 0xe0
 800055c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2202      	movs	r2, #2
 8000562:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2203      	movs	r2, #3
 800056e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	187a      	adds	r2, r7, r1
 8000578:	2390      	movs	r3, #144	; 0x90
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f000 f9b4 	bl	80008ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b00b      	add	sp, #44	; 0x2c
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40013000 	.word	0x40013000
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b08b      	sub	sp, #44	; 0x2c
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	2414      	movs	r4, #20
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	0018      	movs	r0, r3
 80005a2:	2314      	movs	r3, #20
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f002 fb1e 	bl	8002be8 <memset>
  if(huart->Instance==USART1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <HAL_UART_MspInit+0x90>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d132      	bne.n	800061c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <HAL_UART_MspInit+0x94>)
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_UART_MspInit+0x94>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	01c9      	lsls	r1, r1, #7
 80005c0:	430a      	orrs	r2, r1
 80005c2:	619a      	str	r2, [r3, #24]
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_UART_MspInit+0x94>)
 80005c6:	699a      	ldr	r2, [r3, #24]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	01db      	lsls	r3, r3, #7
 80005cc:	4013      	ands	r3, r2
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_UART_MspInit+0x94>)
 80005d4:	695a      	ldr	r2, [r3, #20]
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_UART_MspInit+0x94>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0289      	lsls	r1, r1, #10
 80005dc:	430a      	orrs	r2, r1
 80005de:	615a      	str	r2, [r3, #20]
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_UART_MspInit+0x94>)
 80005e2:	695a      	ldr	r2, [r3, #20]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	029b      	lsls	r3, r3, #10
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005ee:	0021      	movs	r1, r4
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_UART_MspInit+0x98>)
 80005f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2202      	movs	r2, #2
 80005fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2203      	movs	r2, #3
 8000606:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2201      	movs	r2, #1
 800060c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	187a      	adds	r2, r7, r1
 8000610:	2390      	movs	r3, #144	; 0x90
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f000 f968 	bl	80008ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b00b      	add	sp, #44	; 0x2c
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40013800 	.word	0x40013800
 8000628:	40021000 	.word	0x40021000
 800062c:	00008004 	.word	0x00008004

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler+0x4>

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000654:	f000 f87a 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800066c:	f7ff fff7 	bl	800065e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000696:	f002 fa83 	bl	8002ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fdc1 	bl	8000220 <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   r0, =_estack
 80006a0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006ac:	08002c50 	.word	0x08002c50
  ldr r2, =_sbss
 80006b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b4:	20000118 	.word	0x20000118

080006b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_IRQHandler>
	...

080006bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_Init+0x24>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_Init+0x24>)
 80006c6:	2110      	movs	r1, #16
 80006c8:	430a      	orrs	r2, r1
 80006ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f809 	bl	80006e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d2:	f7ff feef 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_InitTick+0x5c>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_InitTick+0x60>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	0019      	movs	r1, r3
 80006f6:	23fa      	movs	r3, #250	; 0xfa
 80006f8:	0098      	lsls	r0, r3, #2
 80006fa:	f7ff fd05 	bl	8000108 <__udivsi3>
 80006fe:	0003      	movs	r3, r0
 8000700:	0019      	movs	r1, r3
 8000702:	0020      	movs	r0, r4
 8000704:	f7ff fd00 	bl	8000108 <__udivsi3>
 8000708:	0003      	movs	r3, r0
 800070a:	0018      	movs	r0, r3
 800070c:	f000 f8e1 	bl	80008d2 <HAL_SYSTICK_Config>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	e00f      	b.n	8000738 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d80b      	bhi.n	8000736 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	2301      	movs	r3, #1
 8000722:	425b      	negs	r3, r3
 8000724:	2200      	movs	r2, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f000 f8be 	bl	80008a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_InitTick+0x64>)
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	0018      	movs	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	b003      	add	sp, #12
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	001a      	movs	r2, r3
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x20>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	18d2      	adds	r2, r2, r3
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_IncTick+0x20>)
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000008 	.word	0x20000008
 800076c:	20000114 	.word	0x20000114

08000770 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  return uwTick;
 8000774:	4b02      	ldr	r3, [pc, #8]	; (8000780 <HAL_GetTick+0x10>)
 8000776:	681b      	ldr	r3, [r3, #0]
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000114 	.word	0x20000114

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	0002      	movs	r2, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b7f      	cmp	r3, #127	; 0x7f
 8000798:	d828      	bhi.n	80007ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <__NVIC_SetPriority+0xd4>)
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	33c0      	adds	r3, #192	; 0xc0
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	589b      	ldr	r3, [r3, r2]
 80007aa:	1dfa      	adds	r2, r7, #7
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	0011      	movs	r1, r2
 80007b0:	2203      	movs	r2, #3
 80007b2:	400a      	ands	r2, r1
 80007b4:	00d2      	lsls	r2, r2, #3
 80007b6:	21ff      	movs	r1, #255	; 0xff
 80007b8:	4091      	lsls	r1, r2
 80007ba:	000a      	movs	r2, r1
 80007bc:	43d2      	mvns	r2, r2
 80007be:	401a      	ands	r2, r3
 80007c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	22ff      	movs	r2, #255	; 0xff
 80007c8:	401a      	ands	r2, r3
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	0018      	movs	r0, r3
 80007d0:	2303      	movs	r3, #3
 80007d2:	4003      	ands	r3, r0
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d8:	481f      	ldr	r0, [pc, #124]	; (8000858 <__NVIC_SetPriority+0xd4>)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	089b      	lsrs	r3, r3, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	33c0      	adds	r3, #192	; 0xc0
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ea:	e031      	b.n	8000850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <__NVIC_SetPriority+0xd8>)
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0019      	movs	r1, r3
 80007f4:	230f      	movs	r3, #15
 80007f6:	400b      	ands	r3, r1
 80007f8:	3b08      	subs	r3, #8
 80007fa:	089b      	lsrs	r3, r3, #2
 80007fc:	3306      	adds	r3, #6
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	3304      	adds	r3, #4
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1dfa      	adds	r2, r7, #7
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	0011      	movs	r1, r2
 800080c:	2203      	movs	r2, #3
 800080e:	400a      	ands	r2, r1
 8000810:	00d2      	lsls	r2, r2, #3
 8000812:	21ff      	movs	r1, #255	; 0xff
 8000814:	4091      	lsls	r1, r2
 8000816:	000a      	movs	r2, r1
 8000818:	43d2      	mvns	r2, r2
 800081a:	401a      	ands	r2, r3
 800081c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	019b      	lsls	r3, r3, #6
 8000822:	22ff      	movs	r2, #255	; 0xff
 8000824:	401a      	ands	r2, r3
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0018      	movs	r0, r3
 800082c:	2303      	movs	r3, #3
 800082e:	4003      	ands	r3, r0
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <__NVIC_SetPriority+0xd8>)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	001c      	movs	r4, r3
 800083c:	230f      	movs	r3, #15
 800083e:	4023      	ands	r3, r4
 8000840:	3b08      	subs	r3, #8
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	430a      	orrs	r2, r1
 8000846:	3306      	adds	r3, #6
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	18c3      	adds	r3, r0, r3
 800084c:	3304      	adds	r3, #4
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b003      	add	sp, #12
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	045b      	lsls	r3, r3, #17
 8000870:	429a      	cmp	r2, r3
 8000872:	d301      	bcc.n	8000878 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000874:	2301      	movs	r3, #1
 8000876:	e010      	b.n	800089a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <SysTick_Config+0x44>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	3a01      	subs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000880:	2301      	movs	r3, #1
 8000882:	425b      	negs	r3, r3
 8000884:	2103      	movs	r1, #3
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ff7c 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x44>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x44>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	210f      	movs	r1, #15
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	1c02      	adds	r2, r0, #0
 80008b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ffbf 	bl	8000860 <SysTick_Config>
 80008e2:	0003      	movs	r3, r0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e149      	b.n	8000b90 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <HAL_GPIO_Init+0x28>
 8000912:	e13a      	b.n	8000b8a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2203      	movs	r2, #3
 800091a:	4013      	ands	r3, r2
 800091c:	2b01      	cmp	r3, #1
 800091e:	d005      	beq.n	800092c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2203      	movs	r2, #3
 8000926:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000928:	2b02      	cmp	r3, #2
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	409a      	lsls	r2, r3
 800093a:	0013      	movs	r3, r2
 800093c:	43da      	mvns	r2, r3
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	409a      	lsls	r2, r3
 800094e:	0013      	movs	r3, r2
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	43da      	mvns	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	2201      	movs	r2, #1
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2203      	movs	r2, #3
 8000994:	4013      	ands	r3, r2
 8000996:	2b03      	cmp	r3, #3
 8000998:	d017      	beq.n	80009ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	409a      	lsls	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	43da      	mvns	r2, r3
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2203      	movs	r2, #3
 80009d0:	4013      	ands	r3, r2
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d123      	bne.n	8000a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	08da      	lsrs	r2, r3, #3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3208      	adds	r2, #8
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	58d3      	ldr	r3, [r2, r3]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	2207      	movs	r2, #7
 80009e8:	4013      	ands	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	43da      	mvns	r2, r3
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691a      	ldr	r2, [r3, #16]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2107      	movs	r1, #7
 8000a02:	400b      	ands	r3, r1
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	08da      	lsrs	r2, r3, #3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3208      	adds	r2, #8
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	6939      	ldr	r1, [r7, #16]
 8000a1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	23c0      	movs	r3, #192	; 0xc0
 8000a58:	029b      	lsls	r3, r3, #10
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d100      	bne.n	8000a60 <HAL_GPIO_Init+0x174>
 8000a5e:	e094      	b.n	8000b8a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	4b51      	ldr	r3, [pc, #324]	; (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	4b50      	ldr	r3, [pc, #320]	; (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000a66:	2101      	movs	r1, #1
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	619a      	str	r2, [r3, #24]
 8000a6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	2201      	movs	r2, #1
 8000a72:	4013      	ands	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a78:	4a4c      	ldr	r2, [pc, #304]	; (8000bac <HAL_GPIO_Init+0x2c0>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	589b      	ldr	r3, [r3, r2]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2203      	movs	r2, #3
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	409a      	lsls	r2, r3
 8000a92:	0013      	movs	r3, r2
 8000a94:	43da      	mvns	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	2390      	movs	r3, #144	; 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d00d      	beq.n	8000ac2 <HAL_GPIO_Init+0x1d6>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a41      	ldr	r2, [pc, #260]	; (8000bb0 <HAL_GPIO_Init+0x2c4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d007      	beq.n	8000abe <HAL_GPIO_Init+0x1d2>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <HAL_GPIO_Init+0x2c8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d101      	bne.n	8000aba <HAL_GPIO_Init+0x1ce>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e004      	b.n	8000ac4 <HAL_GPIO_Init+0x1d8>
 8000aba:	2305      	movs	r3, #5
 8000abc:	e002      	b.n	8000ac4 <HAL_GPIO_Init+0x1d8>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <HAL_GPIO_Init+0x1d8>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	2103      	movs	r1, #3
 8000ac8:	400a      	ands	r2, r1
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	4093      	lsls	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad4:	4935      	ldr	r1, [pc, #212]	; (8000bac <HAL_GPIO_Init+0x2c0>)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae2:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	43da      	mvns	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	035b      	lsls	r3, r3, #13
 8000afa:	4013      	ands	r3, r2
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43da      	mvns	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	039b      	lsls	r3, r3, #14
 8000b24:	4013      	ands	r3, r2
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	029b      	lsls	r3, r3, #10
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43da      	mvns	r2, r3
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	025b      	lsls	r3, r3, #9
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	40da      	lsrs	r2, r3
 8000b98:	1e13      	subs	r3, r2, #0
 8000b9a:	d000      	beq.n	8000b9e <HAL_GPIO_Init+0x2b2>
 8000b9c:	e6ae      	b.n	80008fc <HAL_GPIO_Init+0x10>
  } 
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b006      	add	sp, #24
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	48000800 	.word	0x48000800
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e301      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	d100      	bne.n	8000bda <HAL_RCC_OscConfig+0x1e>
 8000bd8:	e08d      	b.n	8000cf6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bda:	4bc3      	ldr	r3, [pc, #780]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	220c      	movs	r2, #12
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d00e      	beq.n	8000c04 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be6:	4bc0      	ldr	r3, [pc, #768]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	220c      	movs	r2, #12
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d116      	bne.n	8000c20 <HAL_RCC_OscConfig+0x64>
 8000bf2:	4bbd      	ldr	r3, [pc, #756]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	025b      	lsls	r3, r3, #9
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d10d      	bne.n	8000c20 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c04:	4bb8      	ldr	r3, [pc, #736]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	029b      	lsls	r3, r3, #10
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d100      	bne.n	8000c12 <HAL_RCC_OscConfig+0x56>
 8000c10:	e070      	b.n	8000cf4 <HAL_RCC_OscConfig+0x138>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d000      	beq.n	8000c1c <HAL_RCC_OscConfig+0x60>
 8000c1a:	e06b      	b.n	8000cf4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e2d8      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d107      	bne.n	8000c38 <HAL_RCC_OscConfig+0x7c>
 8000c28:	4baf      	ldr	r3, [pc, #700]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4bae      	ldr	r3, [pc, #696]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	0249      	lsls	r1, r1, #9
 8000c32:	430a      	orrs	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e02f      	b.n	8000c98 <HAL_RCC_OscConfig+0xdc>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10c      	bne.n	8000c5a <HAL_RCC_OscConfig+0x9e>
 8000c40:	4ba9      	ldr	r3, [pc, #676]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4ba8      	ldr	r3, [pc, #672]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c46:	49a9      	ldr	r1, [pc, #676]	; (8000eec <HAL_RCC_OscConfig+0x330>)
 8000c48:	400a      	ands	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	4ba6      	ldr	r3, [pc, #664]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4ba5      	ldr	r3, [pc, #660]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c52:	49a7      	ldr	r1, [pc, #668]	; (8000ef0 <HAL_RCC_OscConfig+0x334>)
 8000c54:	400a      	ands	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e01e      	b.n	8000c98 <HAL_RCC_OscConfig+0xdc>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d10e      	bne.n	8000c80 <HAL_RCC_OscConfig+0xc4>
 8000c62:	4ba1      	ldr	r3, [pc, #644]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	4ba0      	ldr	r3, [pc, #640]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	02c9      	lsls	r1, r1, #11
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	4b9d      	ldr	r3, [pc, #628]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b9c      	ldr	r3, [pc, #624]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	0249      	lsls	r1, r1, #9
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e00b      	b.n	8000c98 <HAL_RCC_OscConfig+0xdc>
 8000c80:	4b99      	ldr	r3, [pc, #612]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b98      	ldr	r3, [pc, #608]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c86:	4999      	ldr	r1, [pc, #612]	; (8000eec <HAL_RCC_OscConfig+0x330>)
 8000c88:	400a      	ands	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	4b96      	ldr	r3, [pc, #600]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b95      	ldr	r3, [pc, #596]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c92:	4997      	ldr	r1, [pc, #604]	; (8000ef0 <HAL_RCC_OscConfig+0x334>)
 8000c94:	400a      	ands	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d014      	beq.n	8000cca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fd66 	bl	8000770 <HAL_GetTick>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000caa:	f7ff fd61 	bl	8000770 <HAL_GetTick>
 8000cae:	0002      	movs	r2, r0
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b64      	cmp	r3, #100	; 0x64
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e28a      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbc:	4b8a      	ldr	r3, [pc, #552]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	029b      	lsls	r3, r3, #10
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d0f0      	beq.n	8000caa <HAL_RCC_OscConfig+0xee>
 8000cc8:	e015      	b.n	8000cf6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cca:	f7ff fd51 	bl	8000770 <HAL_GetTick>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fd4c 	bl	8000770 <HAL_GetTick>
 8000cd8:	0002      	movs	r2, r0
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	; 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e275      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	029b      	lsls	r3, r3, #10
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d1f0      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x118>
 8000cf2:	e000      	b.n	8000cf6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d100      	bne.n	8000d02 <HAL_RCC_OscConfig+0x146>
 8000d00:	e069      	b.n	8000dd6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d02:	4b79      	ldr	r3, [pc, #484]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	220c      	movs	r2, #12
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d00b      	beq.n	8000d24 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d0c:	4b76      	ldr	r3, [pc, #472]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	220c      	movs	r2, #12
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d11c      	bne.n	8000d52 <HAL_RCC_OscConfig+0x196>
 8000d18:	4b73      	ldr	r3, [pc, #460]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	025b      	lsls	r3, r3, #9
 8000d20:	4013      	ands	r3, r2
 8000d22:	d116      	bne.n	8000d52 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d24:	4b70      	ldr	r3, [pc, #448]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2202      	movs	r2, #2
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d005      	beq.n	8000d3a <HAL_RCC_OscConfig+0x17e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d001      	beq.n	8000d3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e24b      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3a:	4b6b      	ldr	r3, [pc, #428]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	22f8      	movs	r2, #248	; 0xf8
 8000d40:	4393      	bics	r3, r2
 8000d42:	0019      	movs	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	00da      	lsls	r2, r3, #3
 8000d4a:	4b67      	ldr	r3, [pc, #412]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d50:	e041      	b.n	8000dd6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d024      	beq.n	8000da4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d5a:	4b63      	ldr	r3, [pc, #396]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d66:	f7ff fd03 	bl	8000770 <HAL_GetTick>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d70:	f7ff fcfe 	bl	8000770 <HAL_GetTick>
 8000d74:	0002      	movs	r2, r0
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e227      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d82:	4b59      	ldr	r3, [pc, #356]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2202      	movs	r2, #2
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d0f1      	beq.n	8000d70 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8c:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	22f8      	movs	r2, #248	; 0xf8
 8000d92:	4393      	bics	r3, r2
 8000d94:	0019      	movs	r1, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	00da      	lsls	r2, r3, #3
 8000d9c:	4b52      	ldr	r3, [pc, #328]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e018      	b.n	8000dd6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000da4:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b4f      	ldr	r3, [pc, #316]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000daa:	2101      	movs	r1, #1
 8000dac:	438a      	bics	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fcde 	bl	8000770 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dba:	f7ff fcd9 	bl	8000770 <HAL_GetTick>
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e202      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dcc:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d1f1      	bne.n	8000dba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2208      	movs	r2, #8
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d036      	beq.n	8000e4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d019      	beq.n	8000e1c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000de8:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dec:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	430a      	orrs	r2, r1
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df4:	f7ff fcbc 	bl	8000770 <HAL_GetTick>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fcb7 	bl	8000770 <HAL_GetTick>
 8000e02:	0002      	movs	r2, r0
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e1e0      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	2202      	movs	r2, #2
 8000e16:	4013      	ands	r3, r2
 8000e18:	d0f1      	beq.n	8000dfe <HAL_RCC_OscConfig+0x242>
 8000e1a:	e018      	b.n	8000e4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1c:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	438a      	bics	r2, r1
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e28:	f7ff fca2 	bl	8000770 <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e32:	f7ff fc9d 	bl	8000770 <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e1c6      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d1f1      	bne.n	8000e32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2204      	movs	r2, #4
 8000e54:	4013      	ands	r3, r2
 8000e56:	d100      	bne.n	8000e5a <HAL_RCC_OscConfig+0x29e>
 8000e58:	e0b4      	b.n	8000fc4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e5a:	201f      	movs	r0, #31
 8000e5c:	183b      	adds	r3, r7, r0
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000e64:	69da      	ldr	r2, [r3, #28]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	055b      	lsls	r3, r3, #21
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d110      	bne.n	8000e90 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0549      	lsls	r1, r1, #21
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	61da      	str	r2, [r3, #28]
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	69da      	ldr	r2, [r3, #28]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	055b      	lsls	r3, r3, #21
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e8a:	183b      	adds	r3, r7, r0
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_RCC_OscConfig+0x338>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d11a      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_RCC_OscConfig+0x338>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_RCC_OscConfig+0x338>)
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	0049      	lsls	r1, r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fc61 	bl	8000770 <HAL_GetTick>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb4:	f7ff fc5c 	bl	8000770 <HAL_GetTick>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e185      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x33c>
 8000eda:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	6a1a      	ldr	r2, [r3, #32]
 8000ede:	4b02      	ldr	r3, [pc, #8]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	621a      	str	r2, [r3, #32]
 8000ee6:	e035      	b.n	8000f54 <HAL_RCC_OscConfig+0x398>
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	fffeffff 	.word	0xfffeffff
 8000ef0:	fffbffff 	.word	0xfffbffff
 8000ef4:	40007000 	.word	0x40007000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10c      	bne.n	8000f1a <HAL_RCC_OscConfig+0x35e>
 8000f00:	4bb6      	ldr	r3, [pc, #728]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	4bb5      	ldr	r3, [pc, #724]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	438a      	bics	r2, r1
 8000f0a:	621a      	str	r2, [r3, #32]
 8000f0c:	4bb3      	ldr	r3, [pc, #716]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	4bb2      	ldr	r3, [pc, #712]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f12:	2104      	movs	r1, #4
 8000f14:	438a      	bics	r2, r1
 8000f16:	621a      	str	r2, [r3, #32]
 8000f18:	e01c      	b.n	8000f54 <HAL_RCC_OscConfig+0x398>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x380>
 8000f22:	4bae      	ldr	r3, [pc, #696]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f24:	6a1a      	ldr	r2, [r3, #32]
 8000f26:	4bad      	ldr	r3, [pc, #692]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f28:	2104      	movs	r1, #4
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	621a      	str	r2, [r3, #32]
 8000f2e:	4bab      	ldr	r3, [pc, #684]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f30:	6a1a      	ldr	r2, [r3, #32]
 8000f32:	4baa      	ldr	r3, [pc, #680]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	430a      	orrs	r2, r1
 8000f38:	621a      	str	r2, [r3, #32]
 8000f3a:	e00b      	b.n	8000f54 <HAL_RCC_OscConfig+0x398>
 8000f3c:	4ba7      	ldr	r3, [pc, #668]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f3e:	6a1a      	ldr	r2, [r3, #32]
 8000f40:	4ba6      	ldr	r3, [pc, #664]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	438a      	bics	r2, r1
 8000f46:	621a      	str	r2, [r3, #32]
 8000f48:	4ba4      	ldr	r3, [pc, #656]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	4ba3      	ldr	r3, [pc, #652]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f4e:	2104      	movs	r1, #4
 8000f50:	438a      	bics	r2, r1
 8000f52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d014      	beq.n	8000f86 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5c:	f7ff fc08 	bl	8000770 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f64:	e009      	b.n	8000f7a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff fc03 	bl	8000770 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	4a9b      	ldr	r2, [pc, #620]	; (80011e0 <HAL_RCC_OscConfig+0x624>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e12b      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f7a:	4b98      	ldr	r3, [pc, #608]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	d0f0      	beq.n	8000f66 <HAL_RCC_OscConfig+0x3aa>
 8000f84:	e013      	b.n	8000fae <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fbf3 	bl	8000770 <HAL_GetTick>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8e:	e009      	b.n	8000fa4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f90:	f7ff fbee 	bl	8000770 <HAL_GetTick>
 8000f94:	0002      	movs	r2, r0
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	4a91      	ldr	r2, [pc, #580]	; (80011e0 <HAL_RCC_OscConfig+0x624>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e116      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa4:	4b8d      	ldr	r3, [pc, #564]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4013      	ands	r3, r2
 8000fac:	d1f0      	bne.n	8000f90 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fae:	231f      	movs	r3, #31
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d105      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb8:	4b88      	ldr	r3, [pc, #544]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000fba:	69da      	ldr	r2, [r3, #28]
 8000fbc:	4b87      	ldr	r3, [pc, #540]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000fbe:	4989      	ldr	r1, [pc, #548]	; (80011e4 <HAL_RCC_OscConfig+0x628>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2210      	movs	r2, #16
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d063      	beq.n	8001096 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d12a      	bne.n	800102c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fd6:	4b81      	ldr	r3, [pc, #516]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fda:	4b80      	ldr	r3, [pc, #512]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000fdc:	2104      	movs	r1, #4
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000fe2:	4b7e      	ldr	r3, [pc, #504]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	430a      	orrs	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fbbf 	bl	8000770 <HAL_GetTick>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ff8:	f7ff fbba 	bl	8000770 <HAL_GetTick>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e0e3      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800100a:	4b74      	ldr	r3, [pc, #464]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	d0f1      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001014:	4b71      	ldr	r3, [pc, #452]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	22f8      	movs	r2, #248	; 0xf8
 800101a:	4393      	bics	r3, r2
 800101c:	0019      	movs	r1, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	00da      	lsls	r2, r3, #3
 8001024:	4b6d      	ldr	r3, [pc, #436]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001026:	430a      	orrs	r2, r1
 8001028:	635a      	str	r2, [r3, #52]	; 0x34
 800102a:	e034      	b.n	8001096 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	3305      	adds	r3, #5
 8001032:	d111      	bne.n	8001058 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001034:	4b69      	ldr	r3, [pc, #420]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001038:	4b68      	ldr	r3, [pc, #416]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800103a:	2104      	movs	r1, #4
 800103c:	438a      	bics	r2, r1
 800103e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001040:	4b66      	ldr	r3, [pc, #408]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001044:	22f8      	movs	r2, #248	; 0xf8
 8001046:	4393      	bics	r3, r2
 8001048:	0019      	movs	r1, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	00da      	lsls	r2, r3, #3
 8001050:	4b62      	ldr	r3, [pc, #392]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
 8001056:	e01e      	b.n	8001096 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001058:	4b60      	ldr	r3, [pc, #384]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800105a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105c:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800105e:	2104      	movs	r1, #4
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001064:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001068:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800106a:	2101      	movs	r1, #1
 800106c:	438a      	bics	r2, r1
 800106e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001070:	f7ff fb7e 	bl	8000770 <HAL_GetTick>
 8001074:	0003      	movs	r3, r0
 8001076:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800107a:	f7ff fb79 	bl	8000770 <HAL_GetTick>
 800107e:	0002      	movs	r2, r0
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e0a2      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800108c:	4b53      	ldr	r3, [pc, #332]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800108e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001090:	2202      	movs	r2, #2
 8001092:	4013      	ands	r3, r2
 8001094:	d1f1      	bne.n	800107a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d100      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4e4>
 800109e:	e097      	b.n	80011d0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a0:	4b4e      	ldr	r3, [pc, #312]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	220c      	movs	r2, #12
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d100      	bne.n	80010ae <HAL_RCC_OscConfig+0x4f2>
 80010ac:	e06b      	b.n	8001186 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d14c      	bne.n	8001150 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b6:	4b49      	ldr	r3, [pc, #292]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b48      	ldr	r3, [pc, #288]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 80010bc:	494a      	ldr	r1, [pc, #296]	; (80011e8 <HAL_RCC_OscConfig+0x62c>)
 80010be:	400a      	ands	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb55 	bl	8000770 <HAL_GetTick>
 80010c6:	0003      	movs	r3, r0
 80010c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010cc:	f7ff fb50 	bl	8000770 <HAL_GetTick>
 80010d0:	0002      	movs	r2, r0
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e079      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	049b      	lsls	r3, r3, #18
 80010e6:	4013      	ands	r3, r2
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ea:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	220f      	movs	r2, #15
 80010f0:	4393      	bics	r3, r2
 80010f2:	0019      	movs	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 80010fa:	430a      	orrs	r2, r1
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010fe:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a3a      	ldr	r2, [pc, #232]	; (80011ec <HAL_RCC_OscConfig+0x630>)
 8001104:	4013      	ands	r3, r2
 8001106:	0019      	movs	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	431a      	orrs	r2, r3
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001114:	430a      	orrs	r2, r1
 8001116:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	0449      	lsls	r1, r1, #17
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fb23 	bl	8000770 <HAL_GetTick>
 800112a:	0003      	movs	r3, r0
 800112c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001130:	f7ff fb1e 	bl	8000770 <HAL_GetTick>
 8001134:	0002      	movs	r2, r0
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e047      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	049b      	lsls	r3, r3, #18
 800114a:	4013      	ands	r3, r2
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x574>
 800114e:	e03f      	b.n	80011d0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001156:	4924      	ldr	r1, [pc, #144]	; (80011e8 <HAL_RCC_OscConfig+0x62c>)
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fb08 	bl	8000770 <HAL_GetTick>
 8001160:	0003      	movs	r3, r0
 8001162:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001166:	f7ff fb03 	bl	8000770 <HAL_GetTick>
 800116a:	0002      	movs	r2, r0
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e02c      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	049b      	lsls	r3, r3, #18
 8001180:	4013      	ands	r3, r2
 8001182:	d1f0      	bne.n	8001166 <HAL_RCC_OscConfig+0x5aa>
 8001184:	e024      	b.n	80011d0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e01f      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_RCC_OscConfig+0x620>)
 800119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	025b      	lsls	r3, r3, #9
 80011a4:	401a      	ands	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d10e      	bne.n	80011cc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	220f      	movs	r2, #15
 80011b2:	401a      	ands	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d107      	bne.n	80011cc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	23f0      	movs	r3, #240	; 0xf0
 80011c0:	039b      	lsls	r3, r3, #14
 80011c2:	401a      	ands	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b008      	add	sp, #32
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40021000 	.word	0x40021000
 80011e0:	00001388 	.word	0x00001388
 80011e4:	efffffff 	.word	0xefffffff
 80011e8:	feffffff 	.word	0xfeffffff
 80011ec:	ffc2ffff 	.word	0xffc2ffff

080011f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0b3      	b.n	800136c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001204:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <HAL_RCC_ClockConfig+0x184>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	4013      	ands	r3, r2
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d911      	bls.n	8001236 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	4b58      	ldr	r3, [pc, #352]	; (8001374 <HAL_RCC_ClockConfig+0x184>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	4393      	bics	r3, r2
 800121a:	0019      	movs	r1, r3
 800121c:	4b55      	ldr	r3, [pc, #340]	; (8001374 <HAL_RCC_ClockConfig+0x184>)
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_RCC_ClockConfig+0x184>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	4013      	ands	r3, r2
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d001      	beq.n	8001236 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e09a      	b.n	800136c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2202      	movs	r2, #2
 800123c:	4013      	ands	r3, r2
 800123e:	d015      	beq.n	800126c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2204      	movs	r2, #4
 8001246:	4013      	ands	r3, r2
 8001248:	d006      	beq.n	8001258 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 8001250:	21e0      	movs	r1, #224	; 0xe0
 8001252:	00c9      	lsls	r1, r1, #3
 8001254:	430a      	orrs	r2, r1
 8001256:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001258:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	22f0      	movs	r2, #240	; 0xf0
 800125e:	4393      	bics	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 8001268:	430a      	orrs	r2, r1
 800126a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	d040      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	029b      	lsls	r3, r3, #10
 8001286:	4013      	ands	r3, r2
 8001288:	d114      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e06e      	b.n	800136c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	049b      	lsls	r3, r3, #18
 800129e:	4013      	ands	r3, r2
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e062      	b.n	800136c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2202      	movs	r2, #2
 80012ac:	4013      	ands	r3, r2
 80012ae:	d101      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e05b      	b.n	800136c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	4393      	bics	r3, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 80012c4:	430a      	orrs	r2, r1
 80012c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c8:	f7ff fa52 	bl	8000770 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d0:	e009      	b.n	80012e6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d2:	f7ff fa4d 	bl	8000770 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	4a27      	ldr	r2, [pc, #156]	; (800137c <HAL_RCC_ClockConfig+0x18c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e042      	b.n	800136c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	220c      	movs	r2, #12
 80012ec:	401a      	ands	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1ec      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_ClockConfig+0x184>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d211      	bcs.n	800132a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_RCC_ClockConfig+0x184>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2201      	movs	r2, #1
 800130c:	4393      	bics	r3, r2
 800130e:	0019      	movs	r1, r3
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_RCC_ClockConfig+0x184>)
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_RCC_ClockConfig+0x184>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d001      	beq.n	800132a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e020      	b.n	800136c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2204      	movs	r2, #4
 8001330:	4013      	ands	r3, r2
 8001332:	d009      	beq.n	8001348 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_RCC_ClockConfig+0x190>)
 800133a:	4013      	ands	r3, r2
 800133c:	0019      	movs	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001348:	f000 f820 	bl	800138c <HAL_RCC_GetSysClockFreq>
 800134c:	0001      	movs	r1, r0
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_RCC_ClockConfig+0x188>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	220f      	movs	r2, #15
 8001356:	4013      	ands	r3, r2
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_RCC_ClockConfig+0x194>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	000a      	movs	r2, r1
 800135e:	40da      	lsrs	r2, r3
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x198>)
 8001362:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff f9bd 	bl	80006e4 <HAL_InitTick>
  
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b004      	add	sp, #16
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40022000 	.word	0x40022000
 8001378:	40021000 	.word	0x40021000
 800137c:	00001388 	.word	0x00001388
 8001380:	fffff8ff 	.word	0xfffff8ff
 8001384:	08002c10 	.word	0x08002c10
 8001388:	20000000 	.word	0x20000000

0800138c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	220c      	movs	r2, #12
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d002      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x30>
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ba:	e02c      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013be:	613b      	str	r3, [r7, #16]
      break;
 80013c0:	e02c      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	220f      	movs	r2, #15
 80013c8:	4013      	ands	r3, r2
 80013ca:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	220f      	movs	r2, #15
 80013d6:	4013      	ands	r3, r2
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <HAL_RCC_GetSysClockFreq+0xa8>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	025b      	lsls	r3, r3, #9
 80013e4:	4013      	ands	r3, r2
 80013e6:	d009      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013ec:	f7fe fe8c 	bl	8000108 <__udivsi3>
 80013f0:	0003      	movs	r3, r0
 80013f2:	001a      	movs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4353      	muls	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e009      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	000a      	movs	r2, r1
 8001400:	0152      	lsls	r2, r2, #5
 8001402:	1a52      	subs	r2, r2, r1
 8001404:	0193      	lsls	r3, r2, #6
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	185b      	adds	r3, r3, r1
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
      break;
 8001414:	e002      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001418:	613b      	str	r3, [r7, #16]
      break;
 800141a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800141c:	693b      	ldr	r3, [r7, #16]
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b006      	add	sp, #24
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	40021000 	.word	0x40021000
 800142c:	007a1200 	.word	0x007a1200
 8001430:	08002c28 	.word	0x08002c28
 8001434:	08002c38 	.word	0x08002c38

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_RCC_GetHCLKFreq+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000000 	.word	0x20000000

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001450:	f7ff fff2 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001454:	0001      	movs	r1, r0
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	2207      	movs	r2, #7
 800145e:	4013      	ands	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001462:	5cd3      	ldrb	r3, [r2, r3]
 8001464:	40d9      	lsrs	r1, r3
 8001466:	000b      	movs	r3, r1
}    
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40021000 	.word	0x40021000
 8001474:	08002c20 	.word	0x08002c20

08001478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	025b      	lsls	r3, r3, #9
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001494:	e08e      	b.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2017      	movs	r0, #23
 8001498:	183b      	adds	r3, r7, r0
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	055b      	lsls	r3, r3, #21
 80014a6:	4013      	ands	r3, r2
 80014a8:	d110      	bne.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	4b53      	ldr	r3, [pc, #332]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	0549      	lsls	r1, r1, #21
 80014b4:	430a      	orrs	r2, r1
 80014b6:	61da      	str	r2, [r3, #28]
 80014b8:	4b50      	ldr	r3, [pc, #320]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	183b      	adds	r3, r7, r0
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	d11a      	bne.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d8:	4b49      	ldr	r3, [pc, #292]	; (8001600 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b48      	ldr	r3, [pc, #288]	; (8001600 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	0049      	lsls	r1, r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f943 	bl	8000770 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	e008      	b.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f0:	f7ff f93e 	bl	8000770 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e077      	b.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4013      	ands	r3, r2
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d034      	beq.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	23c0      	movs	r3, #192	; 0xc0
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4013      	ands	r3, r2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d02c      	beq.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a33      	ldr	r2, [pc, #204]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800153a:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800153c:	6a1a      	ldr	r2, [r3, #32]
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0249      	lsls	r1, r1, #9
 8001544:	430a      	orrs	r2, r1
 8001546:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800154e:	492e      	ldr	r1, [pc, #184]	; (8001608 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001550:	400a      	ands	r2, r1
 8001552:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f905 	bl	8000770 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e009      	b.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff f900 	bl	8000770 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e038      	b.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	2202      	movs	r2, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d0f0      	beq.n	800156c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800159a:	430a      	orrs	r2, r1
 800159c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800159e:	2317      	movs	r3, #23
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015ae:	4918      	ldr	r1, [pc, #96]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d009      	beq.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	2203      	movs	r2, #3
 80015c4:	4393      	bics	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015ce:	430a      	orrs	r2, r1
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2220      	movs	r2, #32
 80015d8:	4013      	ands	r3, r2
 80015da:	d009      	beq.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	2210      	movs	r2, #16
 80015e2:	4393      	bics	r3, r2
 80015e4:	0019      	movs	r1, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b006      	add	sp, #24
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000
 8001600:	40007000 	.word	0x40007000
 8001604:	fffffcff 	.word	0xfffffcff
 8001608:	fffeffff 	.word	0xfffeffff
 800160c:	00001388 	.word	0x00001388
 8001610:	efffffff 	.word	0xefffffff

08001614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0a8      	b.n	8001778 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	2382      	movs	r3, #130	; 0x82
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	429a      	cmp	r2, r3
 8001638:	d009      	beq.n	800164e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
 8001640:	e005      	b.n	800164e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	225d      	movs	r2, #93	; 0x5d
 8001658:	5c9b      	ldrb	r3, [r3, r2]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d107      	bne.n	8001670 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	225c      	movs	r2, #92	; 0x5c
 8001664:	2100      	movs	r1, #0
 8001666:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f7fe ff46 	bl	80004fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	225d      	movs	r2, #93	; 0x5d
 8001674:	2102      	movs	r1, #2
 8001676:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	438a      	bics	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	23e0      	movs	r3, #224	; 0xe0
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	429a      	cmp	r2, r3
 8001692:	d902      	bls.n	800169a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e002      	b.n	80016a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	015b      	lsls	r3, r3, #5
 800169e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	23f0      	movs	r3, #240	; 0xf0
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d008      	beq.n	80016be <HAL_SPI_Init+0xaa>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	23e0      	movs	r3, #224	; 0xe0
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d002      	beq.n	80016be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	2382      	movs	r3, #130	; 0x82
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	2384      	movs	r3, #132	; 0x84
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	400b      	ands	r3, r1
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	2102      	movs	r1, #2
 80016da:	400b      	ands	r3, r1
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	2101      	movs	r1, #1
 80016e4:	400b      	ands	r3, r1
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6999      	ldr	r1, [r3, #24]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	400b      	ands	r3, r1
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2138      	movs	r1, #56	; 0x38
 80016fa:	400b      	ands	r3, r1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	400b      	ands	r3, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	0011      	movs	r1, r2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	019b      	lsls	r3, r3, #6
 8001712:	401a      	ands	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	2204      	movs	r2, #4
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	2110      	movs	r1, #16
 800172c:	400b      	ands	r3, r1
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001734:	2108      	movs	r1, #8
 8001736:	400b      	ands	r3, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68d9      	ldr	r1, [r3, #12]
 800173e:	23f0      	movs	r3, #240	; 0xf0
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	400b      	ands	r3, r1
 8001744:	431a      	orrs	r2, r3
 8001746:	0011      	movs	r1, r2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	015b      	lsls	r3, r3, #5
 800174e:	401a      	ands	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4907      	ldr	r1, [pc, #28]	; (8001780 <HAL_SPI_Init+0x16c>)
 8001764:	400a      	ands	r2, r1
 8001766:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	225d      	movs	r2, #93	; 0x5d
 8001772:	2101      	movs	r1, #1
 8001774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b004      	add	sp, #16
 800177e:	bd80      	pop	{r7, pc}
 8001780:	fffff7ff 	.word	0xfffff7ff

08001784 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	1dbb      	adds	r3, r7, #6
 8001792:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001794:	231f      	movs	r3, #31
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	225c      	movs	r2, #92	; 0x5c
 80017a0:	5c9b      	ldrb	r3, [r3, r2]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_SPI_Transmit+0x26>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e147      	b.n	8001a3a <HAL_SPI_Transmit+0x2b6>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	225c      	movs	r2, #92	; 0x5c
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017b2:	f7fe ffdd 	bl	8000770 <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80017ba:	2316      	movs	r3, #22
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	1dba      	adds	r2, r7, #6
 80017c0:	8812      	ldrh	r2, [r2, #0]
 80017c2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	225d      	movs	r2, #93	; 0x5d
 80017c8:	5c9b      	ldrb	r3, [r3, r2]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d004      	beq.n	80017da <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80017d0:	231f      	movs	r3, #31
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	2202      	movs	r2, #2
 80017d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80017d8:	e128      	b.n	8001a2c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_SPI_Transmit+0x64>
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80017e8:	231f      	movs	r3, #31
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80017f0:	e11c      	b.n	8001a2c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	225d      	movs	r2, #93	; 0x5d
 80017f6:	2103      	movs	r1, #3
 80017f8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1dba      	adds	r2, r7, #6
 800180a:	8812      	ldrh	r2, [r2, #0]
 800180c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1dba      	adds	r2, r7, #6
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2244      	movs	r2, #68	; 0x44
 8001820:	2100      	movs	r1, #0
 8001822:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2246      	movs	r2, #70	; 0x46
 8001828:	2100      	movs	r1, #0
 800182a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	429a      	cmp	r2, r3
 8001842:	d110      	bne.n	8001866 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2140      	movs	r1, #64	; 0x40
 8001850:	438a      	bics	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	01c9      	lsls	r1, r1, #7
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2240      	movs	r2, #64	; 0x40
 800186e:	4013      	ands	r3, r2
 8001870:	2b40      	cmp	r3, #64	; 0x40
 8001872:	d007      	beq.n	8001884 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2140      	movs	r1, #64	; 0x40
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	23e0      	movs	r3, #224	; 0xe0
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	429a      	cmp	r2, r3
 800188e:	d952      	bls.n	8001936 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_SPI_Transmit+0x11e>
 8001898:	2316      	movs	r3, #22
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d143      	bne.n	800192a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b2:	1c9a      	adds	r2, r3, #2
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80018c6:	e030      	b.n	800192a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d112      	bne.n	80018fc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e6:	1c9a      	adds	r2, r3, #2
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80018fa:	e016      	b.n	800192a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018fc:	f7fe ff38 	bl	8000770 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d802      	bhi.n	8001912 <HAL_SPI_Transmit+0x18e>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_SPI_Transmit+0x194>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d108      	bne.n	800192a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001918:	231f      	movs	r3, #31
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	2203      	movs	r2, #3
 800191e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	225d      	movs	r2, #93	; 0x5d
 8001924:	2101      	movs	r1, #1
 8001926:	5499      	strb	r1, [r3, r2]
          goto error;
 8001928:	e080      	b.n	8001a2c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800192e:	b29b      	uxth	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1c9      	bne.n	80018c8 <HAL_SPI_Transmit+0x144>
 8001934:	e053      	b.n	80019de <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_SPI_Transmit+0x1c4>
 800193e:	2316      	movs	r3, #22
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d145      	bne.n	80019d4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	330c      	adds	r3, #12
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800196e:	e031      	b.n	80019d4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d113      	bne.n	80019a6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	330c      	adds	r3, #12
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800199a:	b29b      	uxth	r3, r3
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80019a4:	e016      	b.n	80019d4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019a6:	f7fe fee3 	bl	8000770 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d802      	bhi.n	80019bc <HAL_SPI_Transmit+0x238>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	d102      	bne.n	80019c2 <HAL_SPI_Transmit+0x23e>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d108      	bne.n	80019d4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80019c2:	231f      	movs	r3, #31
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2203      	movs	r2, #3
 80019c8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	225d      	movs	r2, #93	; 0x5d
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]
          goto error;
 80019d2:	e02b      	b.n	8001a2c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1c8      	bne.n	8001970 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f000 fcef 	bl	80023c8 <SPI_EndRxTxTransaction>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2220      	movs	r2, #32
 80019f2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10a      	bne.n	8001a12 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001a1a:	231f      	movs	r3, #31
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e003      	b.n	8001a2c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	225d      	movs	r2, #93	; 0x5d
 8001a28:	2101      	movs	r1, #1
 8001a2a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	225c      	movs	r2, #92	; 0x5c
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001a34:	231f      	movs	r3, #31
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	781b      	ldrb	r3, [r3, #0]
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b008      	add	sp, #32
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	1dbb      	adds	r3, r7, #6
 8001a52:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a54:	2117      	movs	r1, #23
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	225d      	movs	r2, #93	; 0x5d
 8001a60:	5c9b      	ldrb	r3, [r3, r2]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d003      	beq.n	8001a70 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a6e:	e12b      	b.n	8001cc8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	2382      	movs	r3, #130	; 0x82
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d113      	bne.n	8001aa4 <HAL_SPI_Receive+0x60>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	225d      	movs	r2, #93	; 0x5d
 8001a88:	2104      	movs	r1, #4
 8001a8a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a8c:	1dbb      	adds	r3, r7, #6
 8001a8e:	881c      	ldrh	r4, [r3, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	0023      	movs	r3, r4
 8001a9c:	f000 f924 	bl	8001ce8 <HAL_SPI_TransmitReceive>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	e118      	b.n	8001cd6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	225c      	movs	r2, #92	; 0x5c
 8001aa8:	5c9b      	ldrb	r3, [r3, r2]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_SPI_Receive+0x6e>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e111      	b.n	8001cd6 <HAL_SPI_Receive+0x292>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	225c      	movs	r2, #92	; 0x5c
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aba:	f7fe fe59 	bl	8000770 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_SPI_Receive+0x8c>
 8001ac8:	1dbb      	adds	r3, r7, #6
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001ad0:	2317      	movs	r3, #23
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ad8:	e0f6      	b.n	8001cc8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	225d      	movs	r2, #93	; 0x5d
 8001ade:	2104      	movs	r1, #4
 8001ae0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1dba      	adds	r2, r7, #6
 8001af2:	2144      	movs	r1, #68	; 0x44
 8001af4:	8812      	ldrh	r2, [r2, #0]
 8001af6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1dba      	adds	r2, r7, #6
 8001afc:	2146      	movs	r1, #70	; 0x46
 8001afe:	8812      	ldrh	r2, [r2, #0]
 8001b00:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	23e0      	movs	r3, #224	; 0xe0
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d908      	bls.n	8001b3e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	496a      	ldr	r1, [pc, #424]	; (8001ce0 <HAL_SPI_Receive+0x29c>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	e008      	b.n	8001b50 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0149      	lsls	r1, r1, #5
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d10f      	bne.n	8001b7c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	438a      	bics	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	495b      	ldr	r1, [pc, #364]	; (8001ce4 <HAL_SPI_Receive+0x2a0>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b40      	cmp	r3, #64	; 0x40
 8001b88:	d007      	beq.n	8001b9a <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	23e0      	movs	r3, #224	; 0xe0
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d900      	bls.n	8001ba8 <HAL_SPI_Receive+0x164>
 8001ba6:	e071      	b.n	8001c8c <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ba8:	e035      	b.n	8001c16 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d117      	bne.n	8001be8 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	330c      	adds	r3, #12
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2246      	movs	r2, #70	; 0x46
 8001bd8:	5a9b      	ldrh	r3, [r3, r2]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b299      	uxth	r1, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2246      	movs	r2, #70	; 0x46
 8001be4:	5299      	strh	r1, [r3, r2]
 8001be6:	e016      	b.n	8001c16 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001be8:	f7fe fdc2 	bl	8000770 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d802      	bhi.n	8001bfe <HAL_SPI_Receive+0x1ba>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_SPI_Receive+0x1c0>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d108      	bne.n	8001c16 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001c04:	2317      	movs	r3, #23
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2203      	movs	r2, #3
 8001c0a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	225d      	movs	r2, #93	; 0x5d
 8001c10:	2101      	movs	r1, #1
 8001c12:	5499      	strb	r1, [r3, r2]
          goto error;
 8001c14:	e058      	b.n	8001cc8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2246      	movs	r2, #70	; 0x46
 8001c1a:	5a9b      	ldrh	r3, [r3, r2]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1c3      	bne.n	8001baa <HAL_SPI_Receive+0x166>
 8001c22:	e039      	b.n	8001c98 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d115      	bne.n	8001c5e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	b292      	uxth	r2, r2
 8001c3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	1c9a      	adds	r2, r3, #2
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2246      	movs	r2, #70	; 0x46
 8001c4e:	5a9b      	ldrh	r3, [r3, r2]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b299      	uxth	r1, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2246      	movs	r2, #70	; 0x46
 8001c5a:	5299      	strh	r1, [r3, r2]
 8001c5c:	e016      	b.n	8001c8c <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c5e:	f7fe fd87 	bl	8000770 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d802      	bhi.n	8001c74 <HAL_SPI_Receive+0x230>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_SPI_Receive+0x236>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001c7a:	2317      	movs	r3, #23
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	2203      	movs	r2, #3
 8001c80:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	225d      	movs	r2, #93	; 0x5d
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]
          goto error;
 8001c8a:	e01d      	b.n	8001cc8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2246      	movs	r2, #70	; 0x46
 8001c90:	5a9b      	ldrh	r3, [r3, r2]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1c5      	bne.n	8001c24 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 fb34 	bl	800230c <SPI_EndRxTransaction>
 8001ca4:	1e03      	subs	r3, r0, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001cb6:	2317      	movs	r3, #23
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	e003      	b.n	8001cc8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	225d      	movs	r2, #93	; 0x5d
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	225c      	movs	r2, #92	; 0x5c
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001cd0:	2317      	movs	r3, #23
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b007      	add	sp, #28
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	ffffefff 	.word	0xffffefff
 8001ce4:	ffffbfff 	.word	0xffffbfff

08001ce8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	1cbb      	adds	r3, r7, #2
 8001cf8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001cfe:	2323      	movs	r3, #35	; 0x23
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	225c      	movs	r2, #92	; 0x5c
 8001d0a:	5c9b      	ldrb	r3, [r3, r2]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_SPI_TransmitReceive+0x2c>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e1c4      	b.n	800209e <HAL_SPI_TransmitReceive+0x3b6>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	225c      	movs	r2, #92	; 0x5c
 8001d18:	2101      	movs	r1, #1
 8001d1a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d1c:	f7fe fd28 	bl	8000770 <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d24:	201b      	movs	r0, #27
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	215d      	movs	r1, #93	; 0x5d
 8001d2c:	5c52      	ldrb	r2, [r2, r1]
 8001d2e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001d36:	2312      	movs	r3, #18
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	1cba      	adds	r2, r7, #2
 8001d3c:	8812      	ldrh	r2, [r2, #0]
 8001d3e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d40:	183b      	adds	r3, r7, r0
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d011      	beq.n	8001d6c <HAL_SPI_TransmitReceive+0x84>
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	2382      	movs	r3, #130	; 0x82
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d107      	bne.n	8001d62 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_SPI_TransmitReceive+0x7a>
 8001d5a:	183b      	adds	r3, r7, r0
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d004      	beq.n	8001d6c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001d62:	2323      	movs	r3, #35	; 0x23
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2202      	movs	r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d6a:	e191      	b.n	8002090 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_SPI_TransmitReceive+0x98>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_SPI_TransmitReceive+0x98>
 8001d78:	1cbb      	adds	r3, r7, #2
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d104      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001d80:	2323      	movs	r3, #35	; 0x23
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d88:	e182      	b.n	8002090 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	225d      	movs	r2, #93	; 0x5d
 8001d8e:	5c9b      	ldrb	r3, [r3, r2]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d003      	beq.n	8001d9e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	225d      	movs	r2, #93	; 0x5d
 8001d9a:	2105      	movs	r1, #5
 8001d9c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1cba      	adds	r2, r7, #2
 8001dae:	2146      	movs	r1, #70	; 0x46
 8001db0:	8812      	ldrh	r2, [r2, #0]
 8001db2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1cba      	adds	r2, r7, #2
 8001db8:	2144      	movs	r1, #68	; 0x44
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1cba      	adds	r2, r7, #2
 8001dc8:	8812      	ldrh	r2, [r2, #0]
 8001dca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1cba      	adds	r2, r7, #2
 8001dd0:	8812      	ldrh	r2, [r2, #0]
 8001dd2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	23e0      	movs	r3, #224	; 0xe0
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d908      	bls.n	8001dfe <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	49ac      	ldr	r1, [pc, #688]	; (80020a8 <HAL_SPI_TransmitReceive+0x3c0>)
 8001df8:	400a      	ands	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	e008      	b.n	8001e10 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	0149      	lsls	r1, r1, #5
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b40      	cmp	r3, #64	; 0x40
 8001e1c:	d007      	beq.n	8001e2e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2140      	movs	r1, #64	; 0x40
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	23e0      	movs	r3, #224	; 0xe0
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d800      	bhi.n	8001e3c <HAL_SPI_TransmitReceive+0x154>
 8001e3a:	e083      	b.n	8001f44 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x168>
 8001e44:	2312      	movs	r3, #18
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d000      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x168>
 8001e4e:	e06d      	b.n	8001f2c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e54:	881a      	ldrh	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	1c9a      	adds	r2, r3, #2
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e74:	e05a      	b.n	8001f2c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d11b      	bne.n	8001ebc <HAL_SPI_TransmitReceive+0x1d4>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_SPI_TransmitReceive+0x1d4>
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d113      	bne.n	8001ebc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d11c      	bne.n	8001f04 <HAL_SPI_TransmitReceive+0x21c>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2246      	movs	r2, #70	; 0x46
 8001ece:	5a9b      	ldrh	r3, [r3, r2]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d016      	beq.n	8001f04 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	1c9a      	adds	r2, r3, #2
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2246      	movs	r2, #70	; 0x46
 8001ef2:	5a9b      	ldrh	r3, [r3, r2]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2246      	movs	r2, #70	; 0x46
 8001efe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f00:	2301      	movs	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f04:	f7fe fc34 	bl	8000770 <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d80b      	bhi.n	8001f2c <HAL_SPI_TransmitReceive+0x244>
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f16:	3301      	adds	r3, #1
 8001f18:	d008      	beq.n	8001f2c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8001f1a:	2323      	movs	r3, #35	; 0x23
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2203      	movs	r2, #3
 8001f20:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	225d      	movs	r2, #93	; 0x5d
 8001f26:	2101      	movs	r1, #1
 8001f28:	5499      	strb	r1, [r3, r2]
        goto error;
 8001f2a:	e0b1      	b.n	8002090 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d19f      	bne.n	8001e76 <HAL_SPI_TransmitReceive+0x18e>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2246      	movs	r2, #70	; 0x46
 8001f3a:	5a9b      	ldrh	r3, [r3, r2]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d199      	bne.n	8001e76 <HAL_SPI_TransmitReceive+0x18e>
 8001f42:	e089      	b.n	8002058 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_SPI_TransmitReceive+0x270>
 8001f4c:	2312      	movs	r3, #18
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d000      	beq.n	8001f58 <HAL_SPI_TransmitReceive+0x270>
 8001f56:	e074      	b.n	8002042 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	330c      	adds	r3, #12
 8001f62:	7812      	ldrb	r2, [r2, #0]
 8001f64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f7e:	e060      	b.n	8002042 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2202      	movs	r2, #2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_SPI_TransmitReceive+0x2e0>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d017      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x2e0>
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d114      	bne.n	8001fc8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d11e      	bne.n	8002014 <HAL_SPI_TransmitReceive+0x32c>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2246      	movs	r2, #70	; 0x46
 8001fda:	5a9b      	ldrh	r3, [r3, r2]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d018      	beq.n	8002014 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	001a      	movs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2246      	movs	r2, #70	; 0x46
 8002002:	5a9b      	ldrh	r3, [r3, r2]
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b299      	uxth	r1, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2246      	movs	r2, #70	; 0x46
 800200e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002010:	2301      	movs	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002014:	f7fe fbac 	bl	8000770 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002020:	429a      	cmp	r2, r3
 8002022:	d802      	bhi.n	800202a <HAL_SPI_TransmitReceive+0x342>
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	3301      	adds	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_SPI_TransmitReceive+0x348>
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	2b00      	cmp	r3, #0
 800202e:	d108      	bne.n	8002042 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002030:	2323      	movs	r3, #35	; 0x23
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2203      	movs	r2, #3
 8002036:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	225d      	movs	r2, #93	; 0x5d
 800203c:	2101      	movs	r1, #1
 800203e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002040:	e026      	b.n	8002090 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d199      	bne.n	8001f80 <HAL_SPI_TransmitReceive+0x298>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2246      	movs	r2, #70	; 0x46
 8002050:	5a9b      	ldrh	r3, [r3, r2]
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d193      	bne.n	8001f80 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 f9b2 	bl	80023c8 <SPI_EndRxTxTransaction>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d006      	beq.n	8002076 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002068:	2323      	movs	r3, #35	; 0x23
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800207e:	2323      	movs	r3, #35	; 0x23
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e003      	b.n	8002090 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	225d      	movs	r2, #93	; 0x5d
 800208c:	2101      	movs	r1, #1
 800208e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	225c      	movs	r2, #92	; 0x5c
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002098:	2323      	movs	r3, #35	; 0x23
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	781b      	ldrb	r3, [r3, #0]
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b00a      	add	sp, #40	; 0x28
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	ffffefff 	.word	0xffffefff

080020ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020bc:	f7fe fb58 	bl	8000770 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	18d3      	adds	r3, r2, r3
 80020ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020cc:	f7fe fb50 	bl	8000770 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	015b      	lsls	r3, r3, #5
 80020da:	0d1b      	lsrs	r3, r3, #20
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	4353      	muls	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020e2:	e058      	b.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	d055      	beq.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020ea:	f7fe fb41 	bl	8000770 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d902      	bls.n	8002100 <SPI_WaitFlagStateUntilTimeout+0x54>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d142      	bne.n	8002186 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	21e0      	movs	r1, #224	; 0xe0
 800210c:	438a      	bics	r2, r1
 800210e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	2382      	movs	r3, #130	; 0x82
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	429a      	cmp	r2, r3
 800211a:	d113      	bne.n	8002144 <SPI_WaitFlagStateUntilTimeout+0x98>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	429a      	cmp	r2, r3
 8002126:	d005      	beq.n	8002134 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	429a      	cmp	r2, r3
 8002132:	d107      	bne.n	8002144 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2140      	movs	r1, #64	; 0x40
 8002140:	438a      	bics	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	019b      	lsls	r3, r3, #6
 800214c:	429a      	cmp	r2, r3
 800214e:	d110      	bne.n	8002172 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	491a      	ldr	r1, [pc, #104]	; (80021c4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800215c:	400a      	ands	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0189      	lsls	r1, r1, #6
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	225d      	movs	r2, #93	; 0x5d
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	225c      	movs	r2, #92	; 0x5c
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e017      	b.n	80021b6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3b01      	subs	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	425a      	negs	r2, r3
 80021a6:	4153      	adcs	r3, r2
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	001a      	movs	r2, r3
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d197      	bne.n	80020e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b008      	add	sp, #32
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	20000000 	.word	0x20000000
 80021c4:	ffffdfff 	.word	0xffffdfff

080021c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80021d6:	2317      	movs	r3, #23
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80021de:	f7fe fac7 	bl	8000770 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	18d3      	adds	r3, r2, r3
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80021ee:	f7fe fabf 	bl	8000770 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	330c      	adds	r3, #12
 80021fc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	0013      	movs	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	189b      	adds	r3, r3, r2
 8002208:	00da      	lsls	r2, r3, #3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	0d1b      	lsrs	r3, r3, #20
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	4353      	muls	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002214:	e068      	b.n	80022e8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	23c0      	movs	r3, #192	; 0xc0
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	429a      	cmp	r2, r3
 800221e:	d10a      	bne.n	8002236 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	2117      	movs	r1, #23
 800222e:	187b      	adds	r3, r7, r1
 8002230:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002232:	187b      	adds	r3, r7, r1
 8002234:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	d055      	beq.n	80022e8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800223c:	f7fe fa98 	bl	8000770 <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002248:	429a      	cmp	r2, r3
 800224a:	d902      	bls.n	8002252 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d142      	bne.n	80022d8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	21e0      	movs	r1, #224	; 0xe0
 800225e:	438a      	bics	r2, r1
 8002260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	2382      	movs	r3, #130	; 0x82
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	429a      	cmp	r2, r3
 800226c:	d113      	bne.n	8002296 <SPI_WaitFifoStateUntilTimeout+0xce>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	429a      	cmp	r2, r3
 8002278:	d005      	beq.n	8002286 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	429a      	cmp	r2, r3
 8002284:	d107      	bne.n	8002296 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2140      	movs	r1, #64	; 0x40
 8002292:	438a      	bics	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	429a      	cmp	r2, r3
 80022a0:	d110      	bne.n	80022c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4916      	ldr	r1, [pc, #88]	; (8002308 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	0189      	lsls	r1, r1, #6
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	225d      	movs	r2, #93	; 0x5d
 80022c8:	2101      	movs	r1, #1
 80022ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	225c      	movs	r2, #92	; 0x5c
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e010      	b.n	80022fa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d18e      	bne.n	8002216 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b00a      	add	sp, #40	; 0x28
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	20000000 	.word	0x20000000
 8002308:	ffffdfff 	.word	0xffffdfff

0800230c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	2382      	movs	r3, #130	; 0x82
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	429a      	cmp	r2, r3
 8002322:	d113      	bne.n	800234c <SPI_EndRxTransaction+0x40>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	429a      	cmp	r2, r3
 800232e:	d005      	beq.n	800233c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2140      	movs	r1, #64	; 0x40
 8002348:	438a      	bics	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	0013      	movs	r3, r2
 8002356:	2200      	movs	r2, #0
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	f7ff fea7 	bl	80020ac <SPI_WaitFlagStateUntilTimeout>
 800235e:	1e03      	subs	r3, r0, #0
 8002360:	d007      	beq.n	8002372 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	2220      	movs	r2, #32
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e026      	b.n	80023c0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	2382      	movs	r3, #130	; 0x82
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	429a      	cmp	r2, r3
 800237c:	d11f      	bne.n	80023be <SPI_EndRxTransaction+0xb2>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	429a      	cmp	r2, r3
 8002388:	d005      	beq.n	8002396 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	429a      	cmp	r2, r3
 8002394:	d113      	bne.n	80023be <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	23c0      	movs	r3, #192	; 0xc0
 800239a:	00d9      	lsls	r1, r3, #3
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	0013      	movs	r3, r2
 80023a4:	2200      	movs	r2, #0
 80023a6:	f7ff ff0f 	bl	80021c8 <SPI_WaitFifoStateUntilTimeout>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d007      	beq.n	80023be <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	2220      	movs	r2, #32
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e000      	b.n	80023c0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b004      	add	sp, #16
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	0159      	lsls	r1, r3, #5
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	0013      	movs	r3, r2
 80023e2:	2200      	movs	r2, #0
 80023e4:	f7ff fef0 	bl	80021c8 <SPI_WaitFifoStateUntilTimeout>
 80023e8:	1e03      	subs	r3, r0, #0
 80023ea:	d007      	beq.n	80023fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	2220      	movs	r2, #32
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e027      	b.n	800244c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	0013      	movs	r3, r2
 8002406:	2200      	movs	r2, #0
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	f7ff fe4f 	bl	80020ac <SPI_WaitFlagStateUntilTimeout>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d007      	beq.n	8002422 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002416:	2220      	movs	r2, #32
 8002418:	431a      	orrs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e014      	b.n	800244c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	23c0      	movs	r3, #192	; 0xc0
 8002426:	00d9      	lsls	r1, r3, #3
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	0013      	movs	r3, r2
 8002430:	2200      	movs	r2, #0
 8002432:	f7ff fec9 	bl	80021c8 <SPI_WaitFifoStateUntilTimeout>
 8002436:	1e03      	subs	r3, r0, #0
 8002438:	d007      	beq.n	800244a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	2220      	movs	r2, #32
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e000      	b.n	800244c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b004      	add	sp, #16
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e044      	b.n	80024f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2278      	movs	r2, #120	; 0x78
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0018      	movs	r0, r3
 800247a:	f7fe f88b 	bl	8000594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2224      	movs	r2, #36	; 0x24
 8002482:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	0018      	movs	r0, r3
 8002498:	f000 f830 	bl	80024fc <UART_SetConfig>
 800249c:	0003      	movs	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e024      	b.n	80024f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 f94b 	bl	800274c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	490d      	ldr	r1, [pc, #52]	; (80024f8 <HAL_UART_Init+0xa4>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	212a      	movs	r1, #42	; 0x2a
 80024d2:	438a      	bics	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 f9e3 	bl	80028b4 <UART_CheckIdleState>
 80024ee:	0003      	movs	r3, r0
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b002      	add	sp, #8
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	ffffb7ff 	.word	0xffffb7ff

080024fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002504:	231e      	movs	r3, #30
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a83      	ldr	r2, [pc, #524]	; (8002738 <UART_SetConfig+0x23c>)
 800252c:	4013      	ands	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a7e      	ldr	r2, [pc, #504]	; (800273c <UART_SetConfig+0x240>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a75      	ldr	r2, [pc, #468]	; (8002740 <UART_SetConfig+0x244>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002578:	4b72      	ldr	r3, [pc, #456]	; (8002744 <UART_SetConfig+0x248>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	2203      	movs	r2, #3
 800257e:	4013      	ands	r3, r2
 8002580:	2b03      	cmp	r3, #3
 8002582:	d00d      	beq.n	80025a0 <UART_SetConfig+0xa4>
 8002584:	d81b      	bhi.n	80025be <UART_SetConfig+0xc2>
 8002586:	2b02      	cmp	r3, #2
 8002588:	d014      	beq.n	80025b4 <UART_SetConfig+0xb8>
 800258a:	d818      	bhi.n	80025be <UART_SetConfig+0xc2>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <UART_SetConfig+0x9a>
 8002590:	2b01      	cmp	r3, #1
 8002592:	d00a      	beq.n	80025aa <UART_SetConfig+0xae>
 8002594:	e013      	b.n	80025be <UART_SetConfig+0xc2>
 8002596:	231f      	movs	r3, #31
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e012      	b.n	80025c6 <UART_SetConfig+0xca>
 80025a0:	231f      	movs	r3, #31
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e00d      	b.n	80025c6 <UART_SetConfig+0xca>
 80025aa:	231f      	movs	r3, #31
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2204      	movs	r2, #4
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e008      	b.n	80025c6 <UART_SetConfig+0xca>
 80025b4:	231f      	movs	r3, #31
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2208      	movs	r2, #8
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e003      	b.n	80025c6 <UART_SetConfig+0xca>
 80025be:	231f      	movs	r3, #31
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	2210      	movs	r2, #16
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d15c      	bne.n	800268e <UART_SetConfig+0x192>
  {
    switch (clocksource)
 80025d4:	231f      	movs	r3, #31
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d015      	beq.n	800260a <UART_SetConfig+0x10e>
 80025de:	dc18      	bgt.n	8002612 <UART_SetConfig+0x116>
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d00d      	beq.n	8002600 <UART_SetConfig+0x104>
 80025e4:	dc15      	bgt.n	8002612 <UART_SetConfig+0x116>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <UART_SetConfig+0xf4>
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d005      	beq.n	80025fa <UART_SetConfig+0xfe>
 80025ee:	e010      	b.n	8002612 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025f0:	f7fe ff2c 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
        break;
 80025f8:	e012      	b.n	8002620 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025fa:	4b53      	ldr	r3, [pc, #332]	; (8002748 <UART_SetConfig+0x24c>)
 80025fc:	61bb      	str	r3, [r7, #24]
        break;
 80025fe:	e00f      	b.n	8002620 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002600:	f7fe fec4 	bl	800138c <HAL_RCC_GetSysClockFreq>
 8002604:	0003      	movs	r3, r0
 8002606:	61bb      	str	r3, [r7, #24]
        break;
 8002608:	e00a      	b.n	8002620 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	61bb      	str	r3, [r7, #24]
        break;
 8002610:	e006      	b.n	8002620 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002616:	231e      	movs	r3, #30
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
        break;
 800261e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d100      	bne.n	8002628 <UART_SetConfig+0x12c>
 8002626:	e07a      	b.n	800271e <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	005a      	lsls	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	085b      	lsrs	r3, r3, #1
 8002632:	18d2      	adds	r2, r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	0019      	movs	r1, r3
 800263a:	0010      	movs	r0, r2
 800263c:	f7fd fd64 	bl	8000108 <__udivsi3>
 8002640:	0003      	movs	r3, r0
 8002642:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	d91c      	bls.n	8002684 <UART_SetConfig+0x188>
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	025b      	lsls	r3, r3, #9
 8002650:	429a      	cmp	r2, r3
 8002652:	d217      	bcs.n	8002684 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	b29a      	uxth	r2, r3
 8002658:	200e      	movs	r0, #14
 800265a:	183b      	adds	r3, r7, r0
 800265c:	210f      	movs	r1, #15
 800265e:	438a      	bics	r2, r1
 8002660:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	b29b      	uxth	r3, r3
 8002668:	2207      	movs	r2, #7
 800266a:	4013      	ands	r3, r2
 800266c:	b299      	uxth	r1, r3
 800266e:	183b      	adds	r3, r7, r0
 8002670:	183a      	adds	r2, r7, r0
 8002672:	8812      	ldrh	r2, [r2, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	183a      	adds	r2, r7, r0
 800267e:	8812      	ldrh	r2, [r2, #0]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	e04c      	b.n	800271e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002684:	231e      	movs	r3, #30
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e047      	b.n	800271e <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 800268e:	231f      	movs	r3, #31
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d015      	beq.n	80026c4 <UART_SetConfig+0x1c8>
 8002698:	dc18      	bgt.n	80026cc <UART_SetConfig+0x1d0>
 800269a:	2b04      	cmp	r3, #4
 800269c:	d00d      	beq.n	80026ba <UART_SetConfig+0x1be>
 800269e:	dc15      	bgt.n	80026cc <UART_SetConfig+0x1d0>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <UART_SetConfig+0x1ae>
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d005      	beq.n	80026b4 <UART_SetConfig+0x1b8>
 80026a8:	e010      	b.n	80026cc <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026aa:	f7fe fecf 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80026ae:	0003      	movs	r3, r0
 80026b0:	61bb      	str	r3, [r7, #24]
        break;
 80026b2:	e012      	b.n	80026da <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <UART_SetConfig+0x24c>)
 80026b6:	61bb      	str	r3, [r7, #24]
        break;
 80026b8:	e00f      	b.n	80026da <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ba:	f7fe fe67 	bl	800138c <HAL_RCC_GetSysClockFreq>
 80026be:	0003      	movs	r3, r0
 80026c0:	61bb      	str	r3, [r7, #24]
        break;
 80026c2:	e00a      	b.n	80026da <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	61bb      	str	r3, [r7, #24]
        break;
 80026ca:	e006      	b.n	80026da <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026d0:	231e      	movs	r3, #30
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
        break;
 80026d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01e      	beq.n	800271e <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	085a      	lsrs	r2, r3, #1
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	18d2      	adds	r2, r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0019      	movs	r1, r3
 80026f0:	0010      	movs	r0, r2
 80026f2:	f7fd fd09 	bl	8000108 <__udivsi3>
 80026f6:	0003      	movs	r3, r0
 80026f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d90a      	bls.n	8002716 <UART_SetConfig+0x21a>
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	025b      	lsls	r3, r3, #9
 8002706:	429a      	cmp	r2, r3
 8002708:	d205      	bcs.n	8002716 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	e003      	b.n	800271e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002716:	231e      	movs	r3, #30
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800272a:	231e      	movs	r3, #30
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781b      	ldrb	r3, [r3, #0]
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b008      	add	sp, #32
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ffff69f3 	.word	0xffff69f3
 800273c:	ffffcfff 	.word	0xffffcfff
 8002740:	fffff4ff 	.word	0xfffff4ff
 8002744:	40021000 	.word	0x40021000
 8002748:	007a1200 	.word	0x007a1200

0800274c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	d00b      	beq.n	8002776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a4a      	ldr	r2, [pc, #296]	; (8002890 <UART_AdvFeatureConfig+0x144>)
 8002766:	4013      	ands	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	d00b      	beq.n	8002798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a43      	ldr	r2, [pc, #268]	; (8002894 <UART_AdvFeatureConfig+0x148>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2204      	movs	r2, #4
 800279e:	4013      	ands	r3, r2
 80027a0:	d00b      	beq.n	80027ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <UART_AdvFeatureConfig+0x14c>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2208      	movs	r2, #8
 80027c0:	4013      	ands	r3, r2
 80027c2:	d00b      	beq.n	80027dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a34      	ldr	r2, [pc, #208]	; (800289c <UART_AdvFeatureConfig+0x150>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2210      	movs	r2, #16
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00b      	beq.n	80027fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a2c      	ldr	r2, [pc, #176]	; (80028a0 <UART_AdvFeatureConfig+0x154>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2220      	movs	r2, #32
 8002804:	4013      	ands	r3, r2
 8002806:	d00b      	beq.n	8002820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <UART_AdvFeatureConfig+0x158>)
 8002810:	4013      	ands	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2240      	movs	r2, #64	; 0x40
 8002826:	4013      	ands	r3, r2
 8002828:	d01d      	beq.n	8002866 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <UART_AdvFeatureConfig+0x15c>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	035b      	lsls	r3, r3, #13
 800284a:	429a      	cmp	r2, r3
 800284c:	d10b      	bne.n	8002866 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a15      	ldr	r2, [pc, #84]	; (80028ac <UART_AdvFeatureConfig+0x160>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	4013      	ands	r3, r2
 800286e:	d00b      	beq.n	8002888 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <UART_AdvFeatureConfig+0x164>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}
 8002890:	fffdffff 	.word	0xfffdffff
 8002894:	fffeffff 	.word	0xfffeffff
 8002898:	fffbffff 	.word	0xfffbffff
 800289c:	ffff7fff 	.word	0xffff7fff
 80028a0:	ffffefff 	.word	0xffffefff
 80028a4:	ffffdfff 	.word	0xffffdfff
 80028a8:	ffefffff 	.word	0xffefffff
 80028ac:	ff9fffff 	.word	0xff9fffff
 80028b0:	fff7ffff 	.word	0xfff7ffff

080028b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b092      	sub	sp, #72	; 0x48
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2284      	movs	r2, #132	; 0x84
 80028c0:	2100      	movs	r1, #0
 80028c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028c4:	f7fd ff54 	bl	8000770 <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2208      	movs	r2, #8
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d12c      	bne.n	8002934 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	0391      	lsls	r1, r2, #14
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4a46      	ldr	r2, [pc, #280]	; (80029fc <UART_CheckIdleState+0x148>)
 80028e4:	9200      	str	r2, [sp, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f000 f88c 	bl	8002a04 <UART_WaitOnFlagUntilTimeout>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d021      	beq.n	8002934 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f0:	f3ef 8310 	mrs	r3, PRIMASK
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80028f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028fa:	2301      	movs	r3, #1
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	f383 8810 	msr	PRIMASK, r3
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	438a      	bics	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	f383 8810 	msr	PRIMASK, r3
}
 8002920:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2278      	movs	r2, #120	; 0x78
 800292c:	2100      	movs	r1, #0
 800292e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e05f      	b.n	80029f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2204      	movs	r2, #4
 800293c:	4013      	ands	r3, r2
 800293e:	2b04      	cmp	r3, #4
 8002940:	d146      	bne.n	80029d0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	03d1      	lsls	r1, r2, #15
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <UART_CheckIdleState+0x148>)
 800294c:	9200      	str	r2, [sp, #0]
 800294e:	2200      	movs	r2, #0
 8002950:	f000 f858 	bl	8002a04 <UART_WaitOnFlagUntilTimeout>
 8002954:	1e03      	subs	r3, r0, #0
 8002956:	d03b      	beq.n	80029d0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002958:	f3ef 8310 	mrs	r3, PRIMASK
 800295c:	60fb      	str	r3, [r7, #12]
  return(result);
 800295e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
 8002962:	2301      	movs	r3, #1
 8002964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f383 8810 	msr	PRIMASK, r3
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4921      	ldr	r1, [pc, #132]	; (8002a00 <UART_CheckIdleState+0x14c>)
 800297a:	400a      	ands	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002980:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298a:	f3ef 8310 	mrs	r3, PRIMASK
 800298e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002990:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
 8002994:	2301      	movs	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f383 8810 	msr	PRIMASK, r3
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2101      	movs	r1, #1
 80029ac:	438a      	bics	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f383 8810 	msr	PRIMASK, r3
}
 80029ba:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	2120      	movs	r1, #32
 80029c2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2278      	movs	r2, #120	; 0x78
 80029c8:	2100      	movs	r1, #0
 80029ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e011      	b.n	80029f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	2120      	movs	r1, #32
 80029dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2278      	movs	r2, #120	; 0x78
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b010      	add	sp, #64	; 0x40
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	01ffffff 	.word	0x01ffffff
 8002a00:	fffffedf 	.word	0xfffffedf

08002a04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a14:	e04b      	b.n	8002aae <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	d048      	beq.n	8002aae <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1c:	f7fd fea8 	bl	8000770 <HAL_GetTick>
 8002a20:	0002      	movs	r2, r0
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e04b      	b.n	8002ace <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d035      	beq.n	8002aae <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d111      	bne.n	8002a74 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2208      	movs	r2, #8
 8002a56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f83c 	bl	8002ad8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2284      	movs	r2, #132	; 0x84
 8002a64:	2108      	movs	r1, #8
 8002a66:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2278      	movs	r2, #120	; 0x78
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e02c      	b.n	8002ace <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	401a      	ands	r2, r3
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d112      	bne.n	8002aae <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 f81f 	bl	8002ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2284      	movs	r2, #132	; 0x84
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2278      	movs	r2, #120	; 0x78
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e00f      	b.n	8002ace <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	425a      	negs	r2, r3
 8002abe:	4153      	adcs	r3, r2
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d0a4      	beq.n	8002a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	; 0x38
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae4:	617b      	str	r3, [r7, #20]
  return(result);
 8002ae6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aea:	2301      	movs	r3, #1
 8002aec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f383 8810 	msr	PRIMASK, r3
}
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4926      	ldr	r1, [pc, #152]	; (8002b9c <UART_EndRxTransfer+0xc4>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b12:	f3ef 8310 	mrs	r3, PRIMASK
 8002b16:	623b      	str	r3, [r7, #32]
  return(result);
 8002b18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	438a      	bics	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	f383 8810 	msr	PRIMASK, r3
}
 8002b42:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d118      	bne.n	8002b7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b50:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b56:	2301      	movs	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f383 8810 	msr	PRIMASK, r3
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	438a      	bics	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f383 8810 	msr	PRIMASK, r3
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	2120      	movs	r1, #32
 8002b84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b00e      	add	sp, #56	; 0x38
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	fffffedf 	.word	0xfffffedf

08002ba0 <__libc_init_array>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	4d0c      	ldr	r5, [pc, #48]	; (8002bd8 <__libc_init_array+0x38>)
 8002ba6:	4c0d      	ldr	r4, [pc, #52]	; (8002bdc <__libc_init_array+0x3c>)
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	42a6      	cmp	r6, r4
 8002bae:	d109      	bne.n	8002bc4 <__libc_init_array+0x24>
 8002bb0:	2600      	movs	r6, #0
 8002bb2:	f000 f821 	bl	8002bf8 <_init>
 8002bb6:	4d0a      	ldr	r5, [pc, #40]	; (8002be0 <__libc_init_array+0x40>)
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	; (8002be4 <__libc_init_array+0x44>)
 8002bba:	1b64      	subs	r4, r4, r5
 8002bbc:	10a4      	asrs	r4, r4, #2
 8002bbe:	42a6      	cmp	r6, r4
 8002bc0:	d105      	bne.n	8002bce <__libc_init_array+0x2e>
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
 8002bc4:	00b3      	lsls	r3, r6, #2
 8002bc6:	58eb      	ldr	r3, [r5, r3]
 8002bc8:	4798      	blx	r3
 8002bca:	3601      	adds	r6, #1
 8002bcc:	e7ee      	b.n	8002bac <__libc_init_array+0xc>
 8002bce:	00b3      	lsls	r3, r6, #2
 8002bd0:	58eb      	ldr	r3, [r5, r3]
 8002bd2:	4798      	blx	r3
 8002bd4:	3601      	adds	r6, #1
 8002bd6:	e7f2      	b.n	8002bbe <__libc_init_array+0x1e>
 8002bd8:	08002c48 	.word	0x08002c48
 8002bdc:	08002c48 	.word	0x08002c48
 8002be0:	08002c48 	.word	0x08002c48
 8002be4:	08002c4c 	.word	0x08002c4c

08002be8 <memset>:
 8002be8:	0003      	movs	r3, r0
 8002bea:	1882      	adds	r2, r0, r2
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <memset+0xa>
 8002bf0:	4770      	bx	lr
 8002bf2:	7019      	strb	r1, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	e7f9      	b.n	8002bec <memset+0x4>

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
